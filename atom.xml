<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://WalkingPineapple.github.io</id>
    <title>摇摇晃摇</title>
    <updated>2021-07-13T15:55:43.543Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://WalkingPineapple.github.io"/>
    <link rel="self" href="https://WalkingPineapple.github.io/atom.xml"/>
    <subtitle>黑夜给了我黑色眼睛，我却用它去寻找光明&lt;/br&gt;                                             
</subtitle>
    <logo>https://WalkingPineapple.github.io/images/avatar.png</logo>
    <icon>https://WalkingPineapple.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, 摇摇晃摇</rights>
    <entry>
        <title type="html"><![CDATA[做一个世界水手，奔赴所有的码头]]></title>
        <id>https://WalkingPineapple.github.io/zuo-yi-ge-shi-jie-shui-shou-ben-fu-suo-you-de-ma-tou/</id>
        <link href="https://WalkingPineapple.github.io/zuo-yi-ge-shi-jie-shui-shou-ben-fu-suo-you-de-ma-tou/">
        </link>
        <updated>2021-07-13T15:54:04.000Z</updated>
        <content type="html"><![CDATA[<p><img src="https://WalkingPineapple.github.io/post-images/1626191723406.JPG" alt="" loading="lazy"><br>
在收听《文化有限FM》播客的时候听到的这句话，原出自惠特曼《草叶集》中的一句话。</p>
<p>入职快一年，失去了远航的方向，找到年前的日记，<strong>司法考试</strong>或许还是自己的一个方向？<strong>网络安全</strong>或许还是自己的兴趣 ？以前的 <strong>博观而约取，厚积而薄发</strong>似乎离自己越来越远......</p>
<p>太可怕了，现在，一边吐槽 <strong>代码的痛苦</strong>，还要 **聊聊数组与ES6 **，骂着 <strong>该死的加班，拿多少工资干多少活</strong> ，最后依然 <strong>等等，我再写完这里再走</strong></p>
<p>比如在这里疯狂吐槽自己，明天依然赶地铁吃早点</p>
<p>自己愈发想在生活工作中找到一种自洽，每天做一点感兴趣的事或许比研究 <strong>究竟是数组或对象</strong> 有趣。</p>
<p>或许有趣的事物才是让自己自洽的方向？</p>
<p>有趣的她？似乎去了解一个人比去群体狂热要好的多。</p>
<p>有趣的运动？ 羽毛球似乎成了我自己继跑步之后的一项运动,或许因为👧 溜:</p>
<p>有趣的学科？学法律总比KPI式的敲代码要好得多吧</p>
<p>有趣的爱好？品茗\旅游......</p>
<p>每天都是靠着这种自己跟自己说话，不断去打开自己心门。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[有趣的事件冒泡与事件捕获]]></title>
        <id>https://WalkingPineapple.github.io/you-qu-de-shi-jian-mou-pao-yu-shi-jian-bu-huo/</id>
        <link href="https://WalkingPineapple.github.io/you-qu-de-shi-jian-mou-pao-yu-shi-jian-bu-huo/">
        </link>
        <updated>2020-10-26T15:21:27.000Z</updated>
        <content type="html"><![CDATA[<h2 id="事件冒泡">事件冒泡</h2>
<pre><code>事件冒泡：在一个对象上述触发某类事件，事件会从最内层的元素开始发生，一直向上传播，直到传到最顶层document
</code></pre>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;meta charset=&quot;utf-8&quot;&gt;
        &lt;title&gt;EventBubbling&amp;&amp;EventCapturing&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div&gt;
            &lt;button type=&quot;button&quot;&gt;Click&lt;/button&gt;
        &lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>以上述代码为例，当我们的点击button按钮发生Click事件时，事件会从内向外执行，具体顺序为：<br>
<strong>button&gt;div&gt;body&gt;html&gt;document</strong></p>
<h2 id="事件捕获">事件捕获</h2>
<pre><code>事件捕获与事件冒泡正好相反，事件会从最外层的元素开始发生，一直向内传播，直到传至最底层的元素。
</code></pre>
<p>还是以上述代码为例，如果进行事件捕获，事件捕获顺序是：<br>
<strong>document&gt;html&gt;body&gt;div&gt;button</strong></p>
<p><strong>W3C标准下事件捕获的优先级通常优先于事件冒泡</strong></p>
<h2 id="addeventlistener">addEventListener</h2>
<pre><code>addEventListener方法用来为一个特定元素绑定一个事件处理函数，并通过传入布尔型参数指定事件捕获还是冒泡
</code></pre>
<p><code>element.addEventListener(event,function,useCapture)</code></p>
<p><strong>如果指定布尔值为true，则事件在捕获阶段执行，如果为false，则在冒泡阶段执行</strong></p>
<p>具体可以参照以下代码为例：</p>
<pre><code class="language-html">&lt;div id=&quot;app1&quot;&gt;app1
			&lt;div id=&quot;app2&quot;&gt;app2&lt;/div&gt;
		&lt;/div&gt;
		&lt;script type=&quot;text/javascript&quot;&gt;
			document.getElementById(&quot;app1&quot;).addEventListener(&quot;click&quot;,function(e){
				console.log(&quot;app1&quot;)
			},false);
			document.getElementById(&quot;app2&quot;).addEventListener(&quot;click&quot;,function(e){
				console.log(&quot;app2&quot;)
			},false);
		&lt;/script&gt;
</code></pre>
<p>设置为false时，则执行事件捕获，如果点击app2，则会先从内执行到外，先打印app2再打印app1，反之事件捕获亦是如此。</p>
<h2 id="阻止冒泡">阻止冒泡</h2>
<p>阻止事件冒泡的方法有很三种，分别是给子级加<strong>event.stopPropagation()事件、在事件处理函数中返回false、让触发事件的元素等于绑定事件的元素</strong>，但是正好最近正在学习Vue，特地介绍以下Vue中阻止事件冒泡的方法。</p>
<h3 id="vue阻止事件冒泡">Vue阻止事件冒泡</h3>
<p>Vue中有很多的事件修饰符，其中stop就可以阻止事件冒泡，具体事例代码如下：</p>
<pre><code class="language-html">&lt;div id=&quot;app&quot;&gt;
		&lt;div class=&quot;inner&quot; @click=&quot;innerClicker&quot;&gt;&lt;input type=&quot;button&quot; value=&quot;Click&quot; @click.stop=&quot;btnClicker&quot;&gt;&lt;/div&gt;&lt;/div&gt;
		&lt;script src=&quot;../../vue%20(1).js&quot; type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
		&lt;script type=&quot;text/javascript&quot;&gt;
			const app =new Vue({
				el:'#app',
				data:{
					
				},
				methods:{
					innerClicker(){
						console.log(&quot;innerClick点击事件&quot;)
					},
					btnClicker(){
						console.log(&quot;button点击事件&quot;)
					}
				}
			})
		&lt;/script&gt;
</code></pre>
<p>当我们点击button按钮时，将不再执行外面div的click事件。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[重拾HTML]]></title>
        <id>https://WalkingPineapple.github.io/chong-shi-html/</id>
        <link href="https://WalkingPineapple.github.io/chong-shi-html/">
        </link>
        <updated>2020-09-21T16:19:51.000Z</updated>
        <content type="html"><![CDATA[<p><strong>前端知识以前已经学过一些，但是由于工作需要，特地想写博客顺便回忆一下，写的不对的地方，望指出立马改正</strong></p>
<h2 id="html">HTML</h2>
<p>HTML(Hypertext Markup langurage）超文本标记语言</p>
<h2 id="开发环境">开发环境</h2>
<ul>
<li>Chrome浏览器</li>
<li>WebStorm</li>
</ul>
<h2 id="基本结构">基本结构</h2>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
&lt;!-- 头部信息 通常用来引入外部CSS样式以及JavaScript等--&gt;
  &lt;meta charset=&quot;UTF-8&quot;&gt;
 &lt;title&gt;HTML基本结构&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;!--网页展示部分--&gt;
&lt;/body&gt;
&lt;/html&gt;&lt;/pre&gt;
</code></pre>
<h2 id="编码设置">编码设置</h2>
<p><strong>在我们开发过程中，可能会因为的项目需求设置网页不同的编码</strong></p>
<pre><code>    在HTML文件中，常见使用编码格式有如下
        1.UTF-8：国际统一编码，英文使用8位为一字节，中文使用24位为三个字节
        2.GB2312：国标编码
        3.GBK：GB2312的升级版，英文和中文都是用双字节，中文支持友好，使用范围没有UTF-8广
        
</code></pre>
<h3 id="设置编码">设置编码</h3>
<p><em><em>在HTML中，我们通常使用meta标签 申明网页编码</em>,meta标签使用有很多，后面将会逐一介绍</em>*</p>
<pre><code class="language-html">&lt;meta  charset=&quot;encode type&quot;&gt;
&lt;!-- eg --&gt;
&lt;meta charset=&quot;UTF-8&quot;&gt;
&lt;meta charset=&quot;GBK&quot;&gt;
&lt;meta charset=&quot;GB2312&quot;&gt;
</code></pre>
<h3 id="meta标签">meta标签</h3>
<p><strong>meta写在网页头部中，可以指定网页类型、编码等</strong></p>
<pre><code>http-equiv:模拟一个 HTTP 响应头。
content:指定文本类型
</code></pre>
<h2 id="标题标签">标题标签</h2>
<p><strong>常见的标签主要有h1-h6,其中align属性（right left justify center）定义了标签的位置</strong></p>
<pre><code class="language-html">            &lt;h1 align=&quot;center&quot;&gt;This is H1&lt;/h1&gt;
            &lt;h2 align=&quot;right&quot;&gt;This is H1&lt;/h2&gt;
            &lt;h3 align=&quot;left&quot;&gt;This is H1&lt;/h3&gt;
            &lt;h4 align=&quot;justify&quot;&gt;This is H1&lt;/h4&gt;
            &lt;h5&gt;This is H1&lt;/h5&gt;
            &lt;h6&gt;This is H1&lt;/h6&gt;
</code></pre>
<h2 id="无序列表">无序列表</h2>
<p><strong>无序列表类似word中的项目符号，常见项目符号由原点（disc）、方形（square）、空心原点（circle）组成，可以通过Type属性进行设置</strong></p>
<pre><code class="language-html">            &lt;ul type=&quot;disc&quot;&gt;
                &lt;li&gt;disc list item1&lt;/li&gt;
                &lt;li&gt;disc list item2&lt;/li&gt;
                &lt;li&gt;disc list item3&lt;/li&gt;
            &lt;/ul&gt;
            &lt;ul type=&quot;square&quot;&gt;
                &lt;li&gt;square list item1&lt;/li&gt;
                &lt;li&gt;square list item2&lt;/li&gt;
                &lt;li&gt;square list item3&lt;/li&gt;
            &lt;/ul&gt;
            &lt;ul type=&quot;circle&quot;&gt;
                &lt;li&gt;circle list item1&lt;/li&gt;
                &lt;li&gt;circle list item2&lt;/li&gt;
                &lt;li&gt;circle list item3&lt;/li&gt;
            &lt;/ul&gt;
</code></pre>
<h2 id="有序列表">有序列表</h2>
<p><strong>有序列表通过数字、字母、罗马数字、i等将列表项顺序排序，可以通过Type属性设置</strong></p>
<pre><code class="language-html">            &lt;ol&gt;
                &lt;li&gt;number list item1&lt;/li&gt;
                &lt;li&gt;number list item2&lt;/li&gt;
                &lt;li&gt;number list item3&lt;/li&gt;
            &lt;/ol&gt;
            &lt;ol type=&quot;A&quot;&gt;
                &lt;li&gt;letter list item1&lt;/li&gt;
                &lt;li&gt;letter list item2&lt;/li&gt;
                &lt;li&gt;letter list item3&lt;/li&gt;
            &lt;/ol&gt;
            &lt;ol type=&quot;i&quot;&gt;
                &lt;li&gt;i list item1&lt;/li&gt;
                &lt;li&gt;i list item2&lt;/li&gt;
                &lt;li&gt;i list item3&lt;/li&gt;
            &lt;/ol&gt;
            &lt;ol type=&quot;I&quot;&gt;
                &lt;li&gt;roma list item1&lt;/li&gt;
                &lt;li&gt;roma list item2&lt;/li&gt;
                &lt;li&gt;roma list item3&lt;/li&gt;
            &lt;/ol&gt;
</code></pre>
<h2 id="图像标签">图像标签</h2>
<p><strong>图像标签为img标签，主要属性有图像url（src）、图像代替文本（alt）图像高宽（height、width）</strong></p>
<pre><code class="language-html">&lt;img src=&quot;../image/Logo.png&quot; alt=&quot;This is a logo&quot; width=&quot;200px&quot; height=&quot;200px&quot;&gt;
</code></pre>
<h2 id="超链接标签">超链接标签</h2>
<p><strong>超链接属性主要有链接地址（href） 链接的目标窗口(target[_self,_blank,_top,_parent]) 链接命名（name）</strong></p>
<pre><code class="language-html">&lt;a href=&quot;#html_top&quot; title=&quot;Go to&quot; name=&quot;goto&quot; &gt;
                &lt;p&gt;Go top&lt;/p&gt;
            &lt;/a&gt;
</code></pre>
<h2 id="表格">表格</h2>
<p>**HTML中表格常常由表格（table）、行（tr）、单元格（td）、带表格头的表格（th）、带标题的表格（caption）、带结构的表格（thead、tbody、tfoot）组成<br>
**</p>
<pre><code class="language-html">            &lt;table border=&quot;1&quot; cellspacing=&quot;5&quot; cellpadding=&quot;100&quot;&gt;
                &lt;tr&gt;&lt;th&gt;Header&lt;/th&gt;&lt;/tr&gt;
                &lt;tr&gt;&lt;td&gt;Data&lt;/td&gt;&lt;/tr&gt;
            &lt;/table&gt;
</code></pre>
<p><img src="https://WalkingPineapple.github.io/post-images/1600705307899.png" alt="" loading="lazy">![<br>
<strong>其中cellpadding为单元格与其内容之间的距离，cellspacing是单元格之间的空白，其余属性为通用属性，border为边框 可以查阅手册</strong></p>
<h3 id="表格实例操作">表格实例操作</h3>
<p><strong>表格跨行跨列操作</strong></p>
<pre><code class="language-html">&lt;table border=&quot;1&quot;&gt;
                &lt;caption&gt;菜品营业额&lt;/caption&gt;
                &lt;thead&gt;
                    &lt;tr&gt;
                    &lt;th rowspan=&quot;2&quot;&gt; 菜品&lt;/th&gt;
                    &lt;th colspan=&quot;2&quot;&gt;2018&lt;/th&gt;
                    &lt;th rowspan=&quot;2&quot;&gt;2019&lt;/th&gt;
                    &lt;th rowspan=&quot;2&quot;&gt;2020&lt;/th&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;th&gt;上半年&lt;/th&gt;
                        &lt;th&gt;下半年&lt;/th&gt;
                    &lt;/tr&gt;
                &lt;/thead&gt;
                &lt;tbody&gt;
                    &lt;tr&gt;
                        &lt;td&gt;老J涮肉&lt;/td&gt;
                        &lt;td&gt;3000&lt;/td&gt;
                        &lt;td&gt;3000&lt;/td&gt;
                        &lt;td&gt;3000&lt;/td&gt;
                        &lt;td&gt;3000&lt;/td&gt;
                        
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        
                        &lt;td&gt;老J串串&lt;/td&gt;
                        &lt;td&gt;3000&lt;/td&gt;
                        &lt;td&gt;3000&lt;/td&gt;
                        &lt;td&gt;3000&lt;/td&gt;
                        &lt;td&gt;3000&lt;/td&gt;
                    &lt;/tr&gt;
                &lt;/tbody&gt;
            &lt;/table&gt;
</code></pre>
<ul>
<li>rowspan:单元格列数合并</li>
<li>colspan:单元格行数合并</li>
</ul>
<p><strong>在实际开发过程中，table表格使用次数很少，现流行Vue等多种前端框架即可快速实现表格内容展示</strong><br>
<strong>其中td、tr、th有很多属性未介绍，但这些属性</strong></p>
<h2 id="表单处理">表单处理</h2>
<p><strong>HTML表单元素有很多，常见的有输入框（input）、菜单和列表标签（select）、菜单和列表项目（option）、文本域（textarea）、分组（optgroup）</strong></p>
<h3 id="表单元素案例">表单元素案例</h3>
<p><strong>表单元素很多，具体使用案例如下</strong></p>
<pre><code>&lt;h1 align=&quot;center&quot;&gt;User Sign Index&lt;/h1&gt;
		&lt;table align=&quot;center&quot; &gt;
			&lt;thead&gt;								
			&lt;/thead&gt;

			&lt;tbody&gt;
				&lt;form action=&quot;后端.php&quot; method=&quot;post&quot;&gt;
				&lt;tr&gt;
					&lt;td&gt;
						username：
					&lt;/td&gt;
					&lt;td&gt;
						&lt;input type=&quot;text&quot; name=&quot;username&quot; id=&quot;&quot; value=&quot;&quot; placeholder=&quot;Please input the username&quot; /&gt;
						&lt;/td&gt;
						
				&lt;/tr&gt;
				&lt;tr&gt;
					&lt;td&gt;
						password：
					&lt;/td&gt;
					&lt;td&gt;
						&lt;input type=&quot;password&quot; name=&quot;password&quot; id=&quot;&quot; value=&quot;&quot; placeholder=&quot;Please input the password&quot; /&gt;
						&lt;/td&gt;
				&lt;/tr&gt;
				&lt;tr&gt;
					&lt;td&gt;
						mail：
					&lt;/td&gt;
					&lt;td&gt;
						&lt;input type=&quot;text&quot; name=&quot;mail&quot; id=&quot;&quot; value=&quot;&quot; placeholder=&quot;Please input the mail&quot; /&gt;
						&lt;/td&gt;
				&lt;/tr&gt;
				&lt;tr&gt;
					&lt;td&gt;
						Verification code：
					&lt;/td&gt;
					&lt;td&gt;
						&lt;input type=&quot;text&quot; name=&quot;verification&quot; id=&quot;&quot; value=&quot;&quot; placeholder=&quot;Please input the Verification code&quot; size=&quot;20&quot;/&gt;
						&lt;/td&gt;
						&lt;td&gt;
							&lt;img src=&quot;../image/vertification.png&quot; width=&quot;50px&quot; height=&quot;20px&quot;&gt;
						&lt;/td&gt;
						
				&lt;/tr&gt;
				&lt;tr align=&quot;center&quot;&gt;
					&lt;td&gt;
						&lt;input type=&quot;submit&quot; id=&quot;&quot; name=&quot;GO&quot; /&gt;
						&lt;/td&gt;
				&lt;/tr&gt;
				&lt;/form&gt;
			&lt;/tbody&gt;
		&lt;/table&gt;
</code></pre>
<p><img src="https://WalkingPineapple.github.io/post-images/1600705286989.png" alt="" loading="lazy"><br>
<strong>特别提示：Get请求和POST请求可以移步HTTP协议有详细介绍</strong></p>
<h2 id="块级标签和行内标签">块级标签和行内标签</h2>
<p><strong>在HTML中，主要的标签分为两类，一类是块级标签，一类是行内标签</strong></p>
<pre><code>块级标签顾名思义就是块级元素，例如DIV标签、P标签等等，
行内标签最常见的就是span标签
其中，行内元素不会单独占用一行，直至排不下才换行，但是块级标签独占一行。
块级标签的布局，将会在下一篇CSS基础 盒子模型中介绍
</code></pre>
<h2 id="总结">总结</h2>
<p><strong>回顾的很简单，毕竟只是回顾，记不起的还需要查手册或资料，从现有开发中，很多前端框架集成已经慢慢将原生的HTML技术取而代之，直接调用插件模块即可，但是并不代表不掌握，换句话说,HTML将是一切框架的基础，无论是前端或后端工程师，都应该掌握学习。<br>
下一篇，将会回顾CSS基础</strong></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[重拾HTTP协议]]></title>
        <id>https://WalkingPineapple.github.io/chong-shi-http-xie-yi/</id>
        <link href="https://WalkingPineapple.github.io/chong-shi-http-xie-yi/">
        </link>
        <updated>2020-09-16T13:43:20.000Z</updated>
        <content type="html"><![CDATA[<h1 id="http协议">HTTP协议</h1>
<p>HTTP（Hyper Text Transfer Protocol）超文本传输协议.</p>
<h2 id="工作原理">工作原理</h2>
<p>HTTP协议常用于B/S架构,通过浏览器向Web服务器发送请求，web服务器收到请求后，向客户端发送响应消息。<br>
HTTP标准端口：80 HTTPS标准端口：443<br>
HTTP使用了URL统一资源标识符来传输数据和建立连接</p>
<h2 id="消息结构">消息结构</h2>
<p>客户端发送请求结构：</p>
<ul>
<li>请求行（request time）：请求行一个一个方法符号开头，空格分开，后面接URL和协议版本</li>
<li>请求头（header）：包括HOST、User-Agent Referer、Cookie等</li>
<li>请求数据</li>
</ul>
<h3 id="请求方法">请求方法</h3>
<pre><code>GET: 请求获取Request=URL所表示的资源，即页面信息
POST：想指定的资源提交数据请处理请看清，数据包含在请求体中
HEAD：请求获取由Request-URL所标识资源响应的消息报头
PUT：请求服务器存储一个资源，并用Request-URL作为其标识
DELETE:请求服务器删除指定页面
OPTIONS：允许客户端查看服务器性能
CONNECT：HTTP/1.1协议中预留给能将链接改为管道方式的代理服务器
TRACE：回显服务器收到的请求，用于测试或诊断
Content-Type：内容类型
</code></pre>
<h3 id="请求报头">请求报头</h3>
<pre><code> User-Agent：客户端或者浏览器类型
 Accept:指定客户端可以接受哪一类型的信息
 Referer：当前页面的URL
 Cookie：身份凭证
 Host:主机地址和端口
</code></pre>
<h2 id="响应报头">响应报头</h2>
<p>服务端发送请求结构:</p>
<ul>
<li>状态行：服务器HTTP协议版本、状态码</li>
<li>消息报头</li>
<li>响应正文</li>
</ul>
<h3 id="状态码">状态码</h3>
<pre><code>200 OK 客户端请求成功
400 Bad Request 客户端请求语法错误，不能被服务器理解
403 Forbidden 服务器收到请求，但是拒绝提供服务
404 Not Found 请求资源不存在
500 Internal Server Error 服务器发生不可预期的错误
503 Server Unavailable 服务器当前不能处理客户端请求，一段时间后恢复
</code></pre>
<h3 id="消息报头">消息报头</h3>
<pre><code>Server Web 服务器名称
Set-cookie 服务端设置和页面关联的Cookie
Refresh 浏览器还有多少时间后刷新文档
Location 客户应该去哪里提取资源，配合302状态码使用
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[计算机网络——STP]]></title>
        <id>https://WalkingPineapple.github.io/ji-suan-ji-wang-luo-stp/</id>
        <link href="https://WalkingPineapple.github.io/ji-suan-ji-wang-luo-stp/">
        </link>
        <updated>2020-09-12T12:20:21.000Z</updated>
        <content type="html"><![CDATA[<p><strong>在一次考试中，发现自己有很多不足，如STP、VLAN 想借用博客给自己充充电，补一补</strong><br>
<strong>如有不对的地方，欢迎指正</strong></p>
<h2 id="stp相关概念">STP相关概念</h2>
<p>在学习STP之前，我们首先需要了解一下STP相关概念</p>
<h3 id="网络环路">网络环路</h3>
<figure data-type="image" tabindex="1"><img src="https://WalkingPineapple.github.io/post-images/1599913256268.png" alt="" loading="lazy"></figure>
<p>如上图所示，A/B/C通过1，2,3交换机互相通信，但如果交换机1,2,3某一链路发生故障时，很容易导致其余两机器无法通信，所以我们的需要增加一条冗余链路，为了防止链路故障发生导致无法通信，增加冗余链路后，如下图所示：<br>
<img src="https://WalkingPineapple.github.io/post-images/1599913265057.png" alt="" loading="lazy"><br>
增加一条冗余链路，就形成了网络环路。</p>
<h3 id="广播风暴">广播风暴</h3>
<p><code>以上图为例，增加一条冗余链路，防止链路故障时发生通信，但形成的网络环路，会将任意PC机A/B/C的发送的数据广播到每一个节点，包括自己，而造成大量复制、传播数据帧，导致网络性能下降或瘫软，这就是广播风暴。</code></p>
<h3 id="stp">STP</h3>
<p><code>STP(Spanning Tree Protocol)生成树协议，是一种链路管理协议，可以从逻辑上断开链路，防止广播风暴，还能起到备份线路的作用。</code></p>
<h3 id="bpdu">BPDU</h3>
<p><code>BPDU(Bridge Protocol Data Unit)网桥协议数据单元，在交换机中，常常使用BPDU交换STP信息，BPDU包括了实现STP的根网桥ID、发送网桥ID、端口ID等信息</code></p>
<h3 id="stp状态">STP状态</h3>
<p>交换机启动STP后，接口有五种状态：<br>
<img src="https://WalkingPineapple.github.io/post-images/1599913271751.png" alt="" loading="lazy"></p>
<h2 id="stp原理">STP原理</h2>
<pre><code>STP工作原理：
1.选择根网桥
    每一台交换机都会有一个唯一的网桥ID（BID，2字节的网桥优先级，6字节的MAC地址），最小BID值的交换机作为根交换机。
2.选择根端口
    选择根网桥后，选择一个距离他最近的其他非根网桥作为根端口，
        距离判断：
            交换机到根桥的总路径成本最低的端口，路径通过带宽计算得到，10Mb/S路径为100，100Mb/S为19,1000M/s为4，开销最小的端口，作为非根交换机得根端口
                如果路径成本相同，则比较上一级（接收BPDU）发送者的桥ID，选择桥ID最小的为对应端口。
                    如果网桥ID相同，则比较发送端口ID，端口ID由端口优先级（8位）和端口编号（8位）组成，选出优先级最小的对应端口
                        如果优先级相同，则选择端口号最小的为根段端口
3.选择指定端口
    每个网段选择一个指定端口，根桥所有端口均为指定端口，
        根路径成本最低
        端口所在网桥ID值最小
        端口ID值小
</code></pre>
<p><strong>交换机优先级默认为32768，STP端口默认优先级为128</strong></p>
<h2 id="端口汇聚">端口汇聚</h2>
<pre><code>STP只能在设备间保证一条活动链路，而其他链路将处于闲置备用状态，硬件资源容易浪费，因此，端口汇聚成多个逻辑链路，可以成倍的提高设备间的宽带。
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Web渗透——信息搜集]]></title>
        <id>https://WalkingPineapple.github.io/web-shen-tou-xin-xi-sou-ji/</id>
        <link href="https://WalkingPineapple.github.io/web-shen-tou-xin-xi-sou-ji/">
        </link>
        <updated>2020-09-10T15:30:26.000Z</updated>
        <content type="html"><![CDATA[<p>信息收集，顾名思义，就是收集目标组织的信息，比如服务器配置信息、网站敏感信息（域名、IP、系统、CMS指纹、开放端口）</p>
<h2 id="域名查询">域名查询</h2>
<p>获取域名注册信息</p>
<h3 id="备案查询">备案查询</h3>
<p>备案号是网站是否合法注册经营的标志，可随时到国家工业和信息化部网站备案系统上查询该ICP备案的相关详细信息。</p>
<pre><code>查询网站：
ICP备案查询：www.beianbeian.com
天眼查、企查查等查询工具。
whois查询：whois.Chinaz.com （Kali 中已经集成工具）
</code></pre>
<h3 id="子域名查询">子域名查询</h3>
<p>子域名就是二级域名</p>
<h4 id="子域名检测工具">子域名检测工具</h4>
<pre><code>Layer子域名挖掘机 K8 WYDOMAIN subdomainsBurte
</code></pre>
<h4 id="搜索引擎语法">搜索引擎语法</h4>
<pre><code>以Google为例，通过搜索引擎的语法配合关键字可以进行搜索，常用Google语法如下：
1.site：指定域名
2.Inurl：URL存在关键字的网页
3.Intext：网页正文中的关键字
4.Filetype：指定文件类型
5.Intitle：网页标题中的关键字
6.Info：指定站点的基本信息
7.Cache：Google缓存
</code></pre>
<p>以学校后台管理系统为例：</p>
<figure data-type="image" tabindex="1"><img src="https://WalkingPineapple.github.io/post-images/1599752076873.png" alt="" loading="lazy"></figure>
<h4 id="暴力枚举">暴力枚举</h4>
<pre><code>Layer子域名挖掘机、K8、subdomainsBurte等

</code></pre>
<h4 id="ssl证书">SSL证书</h4>
<pre><code>证书透明度（Certificate Transparency）是证书授权机构CA的一个项目，CA会将每一个SSL证书发布到公共日志中，一个SSL或TLS常常包含了域名、子域名、邮件地址等
常用SSL证书查询：censys.io、crt.sh
</code></pre>
<p>以某度为例：</p>
<figure data-type="image" tabindex="2"><img src="https://WalkingPineapple.github.io/post-images/1599752132266.png" alt="" loading="lazy"></figure>
<h2 id="端口信息">端口信息</h2>
<p>渗透测试中，端口信息尤为重要，通过收集目标主机的开放端口，可以判断该主机存在服务，常用端口及攻击方向如下：<img src="https://WalkingPineapple.github.io/post-images/1599752115037.png" alt="" loading="lazy"></p>
<p><img src="https://WalkingPineapple.github.io/post-images/1599752088134.png" alt="" loading="lazy"><br>
<img src="https://WalkingPineapple.github.io/post-images/1599752125574.png" alt="" loading="lazy"></p>
<pre><code>常用的端口扫描工具有：scanport、御剑端口扫描、nmap
</code></pre>
<p>Nmap后期将会分一章专题介绍，以御剑端口扫描为例：<br>
<img src="https://WalkingPineapple.github.io/post-images/1599752181385.png" alt="" loading="lazy"></p>
<h2 id="指纹识别">指纹识别</h2>
<pre><code>在渗透时，有很多的指纹检测对象：CMS信息（织梦、Discuz、PHPwind）、前端技术、Web服务器、开发语言、操作系统等。
为此，常用的指纹识别工具：WhatWeb、御剑指纹识别、Wappalyzer
云溪指纹：www.yunsee.cn/finger.html
</code></pre>
<figure data-type="image" tabindex="3"><img src="https://WalkingPineapple.github.io/post-images/1599752187587.png" alt="" loading="lazy"></figure>
<h2 id="ip">IP</h2>
<p>IP地址的重要性不言而喻，但是在实际渗透中，很多目标服务器大多使用了CDN（内容分发）服务<br>
· 如何判断主机服务器是否使用CDN服务？</p>
<pre><code>
1.直接Ping目标主域，查看返回ping 域名是否和主域一致
2.多地ping域名，如果ping出的IP地址一致，极有可能不存在CDN
3.使用zoomeye等工具查询
</code></pre>
<p>· 如果目标使用CDN，如何绕过CDN，查询主机真实IP呢？</p>
<pre><code>1.内部邮箱源，如RSS，一般邮箱都在内部系统，没有经过CDN的解析，可以通过邮件的源代码查找真实IP
2.C段、盘站查询
3.扫描网站测试文件，如phpinfo
4.如果该目标主机的CDN只针对国内用户，可以通过国外代理进行访问查询
5.查询域名解析记录、绕过CloudFlare等查询方式
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ 重拾计算机的网络 OSI ]]></title>
        <id>https://WalkingPineapple.github.io/chong-shi-ji-suan-ji-de-wang-luo-osi/</id>
        <link href="https://WalkingPineapple.github.io/chong-shi-ji-suan-ji-de-wang-luo-osi/">
        </link>
        <updated>2020-09-09T16:29:22.000Z</updated>
        <content type="html"><![CDATA[<p><strong>由于近期在培训，发现以前学过的很多计算机网络知识丢了还多，特地想借博客一起补补，只是回顾，很多东西较为省略</strong></p>
<h2 id="osi-参考模型">OSI 参考模型</h2>
<h3 id="应用层">应用层</h3>
<pre><code>应用层可以理解为应用程序的接口，它可以确定目标通信方的可用性，还可以判断是否有足够的资源进行想要的通信。
APDU 应用数据单元
对应网络协议：
HTTP（超文本传输协议）：80
FTP（文件传输协议）：主动模式下，数据20，控制21
TFTP（简单文件传输协议）：69
SMTP(简单邮件传输协议）：25
SNMP(简单网络管理协议）：161
DNS（域名解析协议）：53
TELENT（远程终端协议）：23
HTTPS(超文本安全协议）：443
POP3（邮件传输协议）：110
DHCP（动态主机配置协议）：67
</code></pre>
<h3 id="表示层">表示层</h3>
<pre><code>表示层既可以向应用层提供数据，也负责数据的转换和代码格式化、数据加密等。
PPDU 表示数据单元
</code></pre>
<h3 id="会话层">会话层</h3>
<pre><code>会话层负责在表示层实体之间建立、管理和终止对话，还对设备或节点之间的对话进行控制。比如：单工、半双工、全双工。
单双工：A-B,A只能负责说，B只能负责听。
半双工：A-B,A说话的时候，B不能说话，B说话，A不能说话。
全双工：A-B,A B同时说话
SPDU 会话数据单元
</code></pre>
<h3 id="传输层">传输层</h3>
<pre><code>传输层利用实现可靠的端到端的数据传输实现数据的分段、传输和组装。具有差错控制、流量/拥塞控制等功能。
PDU：段
对应网络协议：
TCP（传输控制协议）：
UDP（用户数据报协议）

</code></pre>
<h3 id="网络层">网络层</h3>
<pre><code>网络层提供路由选择，选择到达主机的最佳路径，需要在不同的网络设备中传输数据流（路由器）
PDU：分组
对应网络协议：
ICMP(网际组管理协议)
IP（网际互连协议）
ICMP（控制报文协议）
ARP（地址解析协议）
RARP（反向地址转换协议）
</code></pre>
<h3 id="数据链路层">数据链路层</h3>
<pre><code>数据链路层提供数据的物理传输，并处理错误通知、网络拓扑和流量控制。其包含两个子层：LLC MAC 
PDU 帧   
网桥、交换机
</code></pre>
<h3 id="物理层">物理层</h3>
<pre><code>物理层提供了透明的比特流传输。
DTE（数据终端设备）DCE(数据通信设备)区别：DCE提供时钟，DTE不提供时钟。
PDU 比特
</code></pre>
<h2 id="数据封装">数据封装</h2>
<figure data-type="image" tabindex="1"><img src="https://WalkingPineapple.github.io/post-images/1599669004100.png" alt="" loading="lazy"></figure>
<p>结合上图，数据封装的流程如下：<br>
1.用户信息被转换为数据，便于网络间通信传输。<br>
2.数据会加上TCP头转换为数据段，发送主机和接收主机之间建立一条可靠的连接。<br>
3.TCP数据段加上IP头转换为数据包。<br>
4.对数据包加上MAC头转换为数据帧，还需要加入一个FCS校验组。<br>
5.数据帧转换为比特流传输。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[DDOS 初探]]></title>
        <id>https://WalkingPineapple.github.io/ddos-chu-tan/</id>
        <link href="https://WalkingPineapple.github.io/ddos-chu-tan/">
        </link>
        <updated>2020-09-08T15:22:31.000Z</updated>
        <content type="html"><![CDATA[<h1 id="ddos">DDOS</h1>
<p>DOS（Denial Of Service）拒绝服务攻击，通过产生大量的封包请求或请求，让目标网络系统瘫痪。浅显的说，一条道路上可以让若干有限车辆行驶，但现在产生了大量的车辆涌入该条道路，就形成了交通阻塞，最终造成交通瘫痪。<br>
DDOS 分布式拒绝服务攻击，借用上述例子，如果某黑客或组织通过劫持大量肉鸡同时进行DOS攻击，即为分布式拒绝服务。</p>
<h2 id="tcp协议">TCP协议</h2>
<p>在上述解释中，我们提到过需生大量封包请求，其基本原理离不开TCP协议。</p>
<pre><code>TCP(Transfer Control Protocol）传输控制协议，是一种面向连接的、可靠的、基于字节流的通讯协议。
</code></pre>
<h3 id="三次握手">三次握手</h3>
<p>当建立TCP连接时，需要进行三次握手，具体如下图所示：</p>
<figure data-type="image" tabindex="1"><img src="https://WalkingPineapple.github.io/post-images/1599578589960.png" alt="" loading="lazy"></figure>
<p>其中，SYN：同步标志，表示同步序列编号栏有效。ACK:确认标志，表明编号栏有效。<br>
1、建立连接时，客户端发送SYN包（SYN=i）到服务器，并进入到SYN-SEND状态，等待服务器确认</p>
<p>2、服务器收到SYN包，必须确认客户的SYN（ack=i+1）,同时自己也发送一个SYN包（SYN=k）,即SYN+ACK包，此时服务器进入SYN-RECV状态</p>
<p>3、客户端收到服务器的SYN+ACK包，向服务器发送确认报ACK（ack=k+1）,此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成三次握手，客户端与服务器开始传送数据。</p>
<p><strong>通过向目标发送大量带有欺骗性源IP地址的TCP初始连接请求的SYN 数据包来利用握手。</strong></p>
<h1 id="抗击dos">抗击DOS</h1>
<p>1.网络设备</p>
<pre><code>从网络设备层面来看，如有足够的机器去承受攻击，绝对是一种比较理想的解决方案，但成本高。比如：扩充带宽硬抗、使用硬件防火墙、选用高性能设备。
</code></pre>
<p>2.负载均衡</p>
<pre><code>普通级别服务器处理数据的能力最多只能答复每秒数十万个链接请求，网络处理能力很受限制。负载均衡建立在现有网络结构之上，它提供了一种廉价有效透明的方法扩展网络设备和服务器的带宽、增加吞吐量、加强网络数据处理能力、提高网络的灵活性和可用性，对DDoS流量攻击和CC攻击都很见效。
</code></pre>
<p>4.CDN流量清洗</p>
<pre><code>CDN是构建在网络之上的内容分发网络，依靠部署在各地的边缘服务器，通过中心平台的分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率，因此CDN加速也用到了负载均衡技术。
</code></pre>
<p>6.分布式集群防御</p>
<pre><code>分布式集群防御的特点是在每个节点服务器配置多个IP地址，并且每个节点能承受不低于10G的DDoS攻击，如一个节点受攻击无法提供服务，系统将会根据优先级设置自动切换另一个节点，并将攻击者的数据包全部返回发送点，使攻击源成为瘫痪状态，从更为深度的安全防护角度去影响企业的安全执行决策。
</code></pre>
<h1 id="参考资料">参考资料</h1>
<p>TCP/IP 协议 Cisco<br>
知道创宇抗DOS 技术专栏</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[# 结——职记]]></title>
        <id>https://WalkingPineapple.github.io/jie-zhi-ji/</id>
        <link href="https://WalkingPineapple.github.io/jie-zhi-ji/">
        </link>
        <updated>2020-09-07T13:17:42.000Z</updated>
        <summary type="html"><![CDATA[<p>随着汽车慢慢停下，为期一月之久的黄龙培训随之结束。<br>
学习铁路、学习安全似乎已经让我疲惫不堪，在交卷和登车的时间，已经成为了一种奢靡的relax time.</p>
<p>总的来说，接下来总得去完成那么些事：</p>
<p>-10.19日，理论培训结束，期间穿插了各种专业知识的培训和学习。离不开的也是考试。-10.31日，司法考试的日子，法作为我的兴趣之一，很想证明自己一次。</p>
<p>看似简单的日程， 却如清明上河图一般，极为复杂 又极为精妙。</p>
<p>好吧，老伙计，第一次把树洞挂在了博客上，还是得说点什么。</p>
<pre><code>学习专业知识、网安知识技能。
博客输出——学会总结和产出。
众学之道
</code></pre>
<p>博观而约取，厚积而勃发。</p>
<figure data-type="image" tabindex="1"><img src="https://WalkingPineapple.github.io/post-images/1599484827479.jpg" alt="" loading="lazy"></figure>
]]></summary>
        <content type="html"><![CDATA[<p>随着汽车慢慢停下，为期一月之久的黄龙培训随之结束。<br>
学习铁路、学习安全似乎已经让我疲惫不堪，在交卷和登车的时间，已经成为了一种奢靡的relax time.</p>
<p>总的来说，接下来总得去完成那么些事：</p>
<p>-10.19日，理论培训结束，期间穿插了各种专业知识的培训和学习。离不开的也是考试。-10.31日，司法考试的日子，法作为我的兴趣之一，很想证明自己一次。</p>
<p>看似简单的日程， 却如清明上河图一般，极为复杂 又极为精妙。</p>
<p>好吧，老伙计，第一次把树洞挂在了博客上，还是得说点什么。</p>
<pre><code>学习专业知识、网安知识技能。
博客输出——学会总结和产出。
众学之道
</code></pre>
<p>博观而约取，厚积而勃发。</p>
<figure data-type="image" tabindex="1"><img src="https://WalkingPineapple.github.io/post-images/1599484827479.jpg" alt="" loading="lazy"></figure>
<!-- more -->
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[播客推荐——不要为你的职场欲望感到抱歉]]></title>
        <id>https://WalkingPineapple.github.io/BK-1/</id>
        <link href="https://WalkingPineapple.github.io/BK-1/">
        </link>
        <updated>2020-05-19T15:50:57.000Z</updated>
        <content type="html"><![CDATA[<p>最近听到一期Steve说关于职场欲望的播客，碰撞很大，有很多收获：<br>
1.职场的欲望是一种正常现象，包括加薪、同事感情等等，职场的规则往往在于自身能力和价值与报酬的等价交换。<br>
2.leader其中最直观的表现于人格魅力，而这种独特的魅力，是值得你的下属去学习或欣赏的。当然，我觉得作为leader在看待事物的角度应该要比别人更广，想别人所不能想，但不一定要做别人能做。<br>
3.当你有一个真正想要得到的目标时候，任何东西都成为不了羁绊。<br>
4.主动承认自己的不足，针对这些不足主动求助主动解决。<br>
5.失败比后悔更好。</p>
<p>当然啦，这是我的感悟，如果你对这期播客有兴趣，可以通过播客平台自行搜索Steve。</p>
<p>Tips：仅个人分享，没有任何的恰饭！</p>
]]></content>
    </entry>
</feed>