<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://WalkingPineapple.github.io</id>
    <title>摇摇晃摇</title>
    <updated>2020-09-09T16:33:49.783Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://WalkingPineapple.github.io"/>
    <link rel="self" href="https://WalkingPineapple.github.io/atom.xml"/>
    <subtitle>黑夜给了我黑色眼睛，我却用它去寻找光明&lt;/br&gt;                                             
</subtitle>
    <logo>https://WalkingPineapple.github.io/images/avatar.png</logo>
    <icon>https://WalkingPineapple.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 摇摇晃摇</rights>
    <entry>
        <title type="html"><![CDATA[ 重拾计算机的网络 OSI ]]></title>
        <id>https://WalkingPineapple.github.io/post/chong-shi-ji-suan-ji-de-wang-luo-osi/</id>
        <link href="https://WalkingPineapple.github.io/post/chong-shi-ji-suan-ji-de-wang-luo-osi/">
        </link>
        <updated>2020-09-09T16:29:22.000Z</updated>
        <content type="html"><![CDATA[<p><strong>由于近期在培训，发现以前学过的很多计算机网络知识丢了还多，特地想借博客一起补补，只是回顾，很多东西较为省略</strong></p>
<h2 id="osi-参考模型">OSI 参考模型</h2>
<h3 id="应用层">应用层</h3>
<pre><code>应用层可以理解为应用程序的接口，它可以确定目标通信方的可用性，还可以判断是否有足够的资源进行想要的通信。
APDU 应用数据单元
对应网络协议：
HTTP（超文本传输协议）：80
FTP（文件传输协议）：主动模式下，数据20，控制21
TFTP（简单文件传输协议）：69
SMTP(简单邮件传输协议）：25
SNMP(简单网络管理协议）：161
DNS（域名解析协议）：53
TELENT（远程终端协议）：23
HTTPS(超文本安全协议）：443
POP3（邮件传输协议）：110
DHCP（动态主机配置协议）：67
</code></pre>
<h3 id="表示层">表示层</h3>
<pre><code>表示层既可以向应用层提供数据，也负责数据的转换和代码格式化、数据加密等。
PPDU 表示数据单元
</code></pre>
<h3 id="会话层">会话层</h3>
<pre><code>会话层负责在表示层实体之间建立、管理和终止对话，还对设备或节点之间的对话进行控制。比如：单工、半双工、全双工。
单双工：A-B,A只能负责说，B只能负责听。
半双工：A-B,A说话的时候，B不能说话，B说话，A不能说话。
全双工：A-B,A B同时说话
SPDU 会话数据单元
</code></pre>
<h3 id="传输层">传输层</h3>
<pre><code>传输层利用实现可靠的端到端的数据传输实现数据的分段、传输和组装。具有差错控制、流量/拥塞控制等功能。
PDU：段
对应网络协议：
TCP（传输控制协议）：
UDP（用户数据报协议）

</code></pre>
<h3 id="网络层">网络层</h3>
<pre><code>网络层提供路由选择，选择到达主机的最佳路径，需要在不同的网络设备中传输数据流（路由器）
PDU：分组
对应网络协议：
ICMP(网际组管理协议)
IP（网际互连协议）
ICMP（控制报文协议）
ARP（地址解析协议）
RARP（反向地址转换协议）
</code></pre>
<h3 id="数据链路层">数据链路层</h3>
<pre><code>数据链路层提供数据的物理传输，并处理错误通知、网络拓扑和流量控制。其包含两个子层：LLC MAC 
PDU 帧   
网桥、交换机
</code></pre>
<h3 id="物理层">物理层</h3>
<pre><code>物理层提供了透明的比特流传输。
DTE（数据终端设备）DCE(数据通信设备)区别：DCE提供时钟，DTE不提供时钟。
PDU 比特
</code></pre>
<h2 id="数据封装">数据封装</h2>
<figure data-type="image" tabindex="1"><img src="https://WalkingPineapple.github.io/post-images/1599669004100.png" alt="" loading="lazy"></figure>
<p>结合上图，数据封装的流程如下：<br>
1.用户信息被转换为数据，便于网络间通信传输。<br>
2.数据会加上TCP头转换为数据段，发送主机和接收主机之间建立一条可靠的连接。<br>
3.TCP数据段加上IP头转换为数据包。<br>
4.对数据包加上MAC头转换为数据帧，还需要加入一个FCS校验组。<br>
5.数据帧转换为比特流传输。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[DDOS 初探]]></title>
        <id>https://WalkingPineapple.github.io/post/ddos-chu-tan/</id>
        <link href="https://WalkingPineapple.github.io/post/ddos-chu-tan/">
        </link>
        <updated>2020-09-08T15:22:31.000Z</updated>
        <content type="html"><![CDATA[<h1 id="ddos">DDOS</h1>
<p>DOS（Denial Of Service）拒绝服务攻击，通过产生大量的封包请求或请求，让目标网络系统瘫痪。浅显的说，一条道路上可以让若干有限车辆行驶，但现在产生了大量的车辆涌入该条道路，就形成了交通阻塞，最终造成交通瘫痪。<br>
DDOS 分布式拒绝服务攻击，借用上述例子，如果某黑客或组织通过劫持大量肉鸡同时进行DOS攻击，即为分布式拒绝服务。</p>
<h2 id="tcp协议">TCP协议</h2>
<p>在上述解释中，我们提到过需生大量封包请求，其基本原理离不开TCP协议。</p>
<pre><code>TCP(Transfer Control Protocol）传输控制协议，是一种面向连接的、可靠的、基于字节流的通讯协议。
</code></pre>
<h3 id="三次握手">三次握手</h3>
<p>当建立TCP连接时，需要进行三次握手，具体如下图所示：</p>
<figure data-type="image" tabindex="1"><img src="https://WalkingPineapple.github.io/post-images/1599578589960.png" alt="" loading="lazy"></figure>
<p>其中，SYN：同步标志，表示同步序列编号栏有效。ACK:确认标志，表明编号栏有效。<br>
1、建立连接时，客户端发送SYN包（SYN=i）到服务器，并进入到SYN-SEND状态，等待服务器确认</p>
<p>2、服务器收到SYN包，必须确认客户的SYN（ack=i+1）,同时自己也发送一个SYN包（SYN=k）,即SYN+ACK包，此时服务器进入SYN-RECV状态</p>
<p>3、客户端收到服务器的SYN+ACK包，向服务器发送确认报ACK（ack=k+1）,此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成三次握手，客户端与服务器开始传送数据。</p>
<p><strong>通过向目标发送大量带有欺骗性源IP地址的TCP初始连接请求的SYN 数据包来利用握手。</strong></p>
<h1 id="抗击dos">抗击DOS</h1>
<p>1.网络设备</p>
<pre><code>从网络设备层面来看，如有足够的机器去承受攻击，绝对是一种比较理想的解决方案，但成本高。比如：扩充带宽硬抗、使用硬件防火墙、选用高性能设备。
</code></pre>
<p>2.负载均衡</p>
<pre><code>普通级别服务器处理数据的能力最多只能答复每秒数十万个链接请求，网络处理能力很受限制。负载均衡建立在现有网络结构之上，它提供了一种廉价有效透明的方法扩展网络设备和服务器的带宽、增加吞吐量、加强网络数据处理能力、提高网络的灵活性和可用性，对DDoS流量攻击和CC攻击都很见效。
</code></pre>
<p>4.CDN流量清洗</p>
<pre><code>CDN是构建在网络之上的内容分发网络，依靠部署在各地的边缘服务器，通过中心平台的分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率，因此CDN加速也用到了负载均衡技术。
</code></pre>
<p>6.分布式集群防御</p>
<pre><code>分布式集群防御的特点是在每个节点服务器配置多个IP地址，并且每个节点能承受不低于10G的DDoS攻击，如一个节点受攻击无法提供服务，系统将会根据优先级设置自动切换另一个节点，并将攻击者的数据包全部返回发送点，使攻击源成为瘫痪状态，从更为深度的安全防护角度去影响企业的安全执行决策。
</code></pre>
<h1 id="参考资料">参考资料</h1>
<p>TCP/IP 协议 Cisco<br>
知道创宇抗DOS 技术专栏</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[# 结——职记]]></title>
        <id>https://WalkingPineapple.github.io/post/jie-zhi-ji/</id>
        <link href="https://WalkingPineapple.github.io/post/jie-zhi-ji/">
        </link>
        <updated>2020-09-07T13:17:42.000Z</updated>
        <summary type="html"><![CDATA[<p>随着汽车慢慢停下，为期一月之久的黄龙培训随之结束。<br>
学习铁路、学习安全似乎已经让我疲惫不堪，在交卷和登车的时间，已经成为了一种奢靡的relax time.</p>
<p>总的来说，接下来总得去完成那么些事：</p>
<p>-10.19日，理论培训结束，期间穿插了各种专业知识的培训和学习。离不开的也是考试。-10.31日，司法考试的日子，法作为我的兴趣之一，很想证明自己一次。</p>
<p>看似简单的日程， 却如清明上河图一般，极为复杂 又极为精妙。</p>
<p>好吧，老伙计，第一次把树洞挂在了博客上，还是得说点什么。</p>
<pre><code>学习专业知识、网安知识技能。
博客输出——学会总结和产出。
众学之道
</code></pre>
<p>博观而约取，厚积而勃发。</p>
<figure data-type="image" tabindex="1"><img src="https://WalkingPineapple.github.io/post-images/1599484827479.jpg" alt="" loading="lazy"></figure>
]]></summary>
        <content type="html"><![CDATA[<p>随着汽车慢慢停下，为期一月之久的黄龙培训随之结束。<br>
学习铁路、学习安全似乎已经让我疲惫不堪，在交卷和登车的时间，已经成为了一种奢靡的relax time.</p>
<p>总的来说，接下来总得去完成那么些事：</p>
<p>-10.19日，理论培训结束，期间穿插了各种专业知识的培训和学习。离不开的也是考试。-10.31日，司法考试的日子，法作为我的兴趣之一，很想证明自己一次。</p>
<p>看似简单的日程， 却如清明上河图一般，极为复杂 又极为精妙。</p>
<p>好吧，老伙计，第一次把树洞挂在了博客上，还是得说点什么。</p>
<pre><code>学习专业知识、网安知识技能。
博客输出——学会总结和产出。
众学之道
</code></pre>
<p>博观而约取，厚积而勃发。</p>
<figure data-type="image" tabindex="1"><img src="https://WalkingPineapple.github.io/post-images/1599484827479.jpg" alt="" loading="lazy"></figure>
<!-- more -->
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[播客推荐——不要为你的职场欲望感到抱歉]]></title>
        <id>https://WalkingPineapple.github.io/post/BK-1/</id>
        <link href="https://WalkingPineapple.github.io/post/BK-1/">
        </link>
        <updated>2020-05-19T15:50:57.000Z</updated>
        <content type="html"><![CDATA[<p>最近听到一期Steve说关于职场欲望的播客，碰撞很大，有很多收获：<br>
1.职场的欲望是一种正常现象，包括加薪、同事感情等等，职场的规则往往在于自身能力和价值与报酬的等价交换。<br>
2.leader其中最直观的表现于人格魅力，而这种独特的魅力，是值得你的下属去学习或欣赏的。当然，我觉得作为leader在看待事物的角度应该要比别人更广，想别人所不能想，但不一定要做别人能做。<br>
3.当你有一个真正想要得到的目标时候，任何东西都成为不了羁绊。<br>
4.主动承认自己的不足，针对这些不足主动求助主动解决。<br>
5.失败比后悔更好。</p>
<p>当然啦，这是我的感悟，如果你对这期播客有兴趣，可以通过播客平台自行搜索Steve。</p>
<p>Tips：仅个人分享，没有任何的恰饭！</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[讲人话理解“大数定理”和“中心极限法则”]]></title>
        <id>https://WalkingPineapple.github.io/post/jiang-ren-hua-li-jie-da-shu-ding-li-he-zhong-xin-ji-xian-fa-ze/</id>
        <link href="https://WalkingPineapple.github.io/post/jiang-ren-hua-li-jie-da-shu-ding-li-he-zhong-xin-ji-xian-fa-ze/">
        </link>
        <updated>2020-05-13T13:33:57.000Z</updated>
        <content type="html"><![CDATA[<h2 id="autor-pineapple">autor Pineapple</h2>
<h1 id="大数定律">大数定律</h1>
<pre><code>大数定律 LLN（Law of large numbers）, 样本数量越多，则其平均就越趋近于期望值。
</code></pre>
<pre><code>人话版：抛硬币，硬币的正反面朝上就是偶然的，但是，如果我们抛的次数越多，我们可以发现，正面朝上的次数占总次数的1/2,反面亦是如此。可以参考下图（抛1万次硬币，正面朝上次数）
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://WalkingPineapple.github.io/post-images/1589376925613.png" alt="" loading="lazy"></figure>
<h2 id="伯努利定理弱大数定理">伯努利定理（弱大数定理）</h2>
<h3 id="伯努利试验">伯努利试验</h3>
<pre><code>试验：Trial或Test，通常指的是为了了解性能或结果而进行的测试性工作。
</code></pre>
<pre><code>通常，试验满足以下三个条件的称为随机试验：
1.可以在相同的条件下重复进行
2.每次试验的结果可能不止一个，并且能事先明确试验的所有可能的结果
3.进行一次实验之前，无法确定会出现哪一种结果
</code></pre>
<p><strong>伯努利实验</strong> ：只有两种可能结果的单次随机实验<br>
如果一个随机的试验只包含两种出现的的结果（成功or失败），对于一个随机变量X而言，第一种结果可能出现的概率为为p，另一种结果出现的概率为1-p。</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">Pr</mi><mo>⁡</mo><mo>[</mo><mi>X</mi><mo>=</mo><mn>1</mn><mo>]</mo><mo>=</mo><mi>p</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">Pr</mi><mo>⁡</mo><mo>[</mo><mi>X</mi><mo>=</mo><mn>0</mn><mo>]</mo><mo>=</mo><mn>1</mn><mo>−</mo><mi>p</mi></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{array}{l}
\operatorname{Pr}[X=1]=p \\
\operatorname{Pr}[X=0]=1-p
\end{array}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.4000000000000004em;vertical-align:-0.9500000000000004em;"></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop"><span class="mord mathrm">P</span><span class="mord mathrm">r</span></span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">p</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop"><span class="mord mathrm">P</span><span class="mord mathrm">r</span></span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span></span></span></p>
<h3 id="伯努利定理">伯努利定理</h3>
<p>重复n次伯努利实验，每次成功的概率为P，总成功的次数为Sn，则对任意给定实数ε&gt;0：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><munder><mi>lim</mi><mo>⁡</mo><mrow><mi>n</mi><mo>→</mo><mi mathvariant="normal">∞</mi></mrow></munder><mi>P</mi><mrow><mo fence="true">{</mo><mrow><mo fence="true">∣</mo><mfrac><msub><mi>S</mi><mi>n</mi></msub><mi>n</mi></mfrac><mo>−</mo><mi>p</mi><mo fence="true">∣</mo></mrow><mo>&lt;</mo><mi>ε</mi><mo fence="true">}</mo></mrow><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\lim _{n \rightarrow \infty} P\left\{\left|\frac{S_{n}}{n}-p\right|&lt;\varepsilon\right\}=1
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.42401em;vertical-align:-0.95003em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-2.1em;margin-left:0em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mrel mtight">→</span><span class="mord mtight">∞</span></span></span></span><span style="top:-2.7em;"><span class="pstrut" style="height:2.7em;"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">{</span></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.47398em;"><span style="top:-1.65598em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.26198em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.86798em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-3.47398em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500199999999999em;"><span></span></span></span></span></span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.36033em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">n</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">p</span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.47398em;"><span style="top:-1.65598em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.26198em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.86798em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-3.47398em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500199999999999em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">ε</span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">}</span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></span></p>
<p>若fn=Sn/n表示n次试验中成功次数的频率，那可以写为：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><munder><mi>lim</mi><mo>⁡</mo><mrow><mi>n</mi><mo>→</mo><mi mathvariant="normal">∞</mi></mrow></munder><mi>P</mi><mrow><mo fence="true">{</mo><mi mathvariant="normal">∣</mi><msub><mi>f</mi><mi>n</mi></msub><mo>−</mo><mi>p</mi><mi mathvariant="normal">∣</mi><mo>&lt;</mo><mi>ε</mi><mo fence="true">}</mo></mrow><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\lim _{n \rightarrow \infty} P\left\{|f_{n}-p |&lt;\varepsilon\right\}=1
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.45em;vertical-align:-0.7em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-2.1em;margin-left:0em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mrel mtight">→</span><span class="mord mtight">∞</span></span></span></span><span style="top:-2.7em;"><span class="pstrut" style="height:2.7em;"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">{</span><span class="mord">∣</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">p</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">ε</span><span class="mclose delimcenter" style="top:0em;">}</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>f</mi><mi>n</mi></msub><mover><mo><mo>⟶</mo></mo><mi>P</mi></mover><mi>p</mi></mrow><annotation encoding="application/x-tex">f_{n} \stackrel{P}{\longrightarrow} p
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.4837710000000002em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.2893310000000002em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">⟶</span></span></span><span style="top:-3.7110000000000003em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">P</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.011em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span></span></span></span></span></p>
<h2 id="辛钦大数定理">辛钦大数定理</h2>
<h3 id="随机变量">随机变量</h3>
<p>如果X指定给概率空间S中每一个事件e有一个实数X(e)，同时针对每一个实数r都有一个事件集合Ar与其相对应，<br>
其中$$A_{\tau}={e: X(e) \leq r}$$那X被称作随机变量。</p>
<pre><code>人话版：把一切可以随机的东西都进行量化（映射为实数）
</code></pre>
<h3 id="数学期望">数学期望</h3>
<p>一个离散型随机变量的期望值（数学期望）是试验中每次可能的结果乘以其结果概率的总和（<strong>加权平均和</strong>）。</p>
<h3 id="辛钦定理">辛钦定理</h3>
<p>设随机变量X1，X2，X3，........，Xn，..........相互独立，服从同一分布且具有相同的数学期望E（Xk）=μ（k=1,2,........）那对于任意正数 ε，则</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><munder><mi>lim</mi><mo>⁡</mo><mrow><mi>n</mi><mo>→</mo><mi mathvariant="normal">∞</mi></mrow></munder><mi>P</mi><mrow><mo fence="true">{</mo><mrow><mo fence="true">∣</mo><mfrac><mn>1</mn><mi>n</mi></mfrac><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msub><mi>X</mi><mi>k</mi></msub><mo>−</mo><mi>μ</mi><mo fence="true">∣</mo></mrow><mo>&lt;</mo><mi>ε</mi><mo fence="true">}</mo></mrow><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\lim _{n \rightarrow \infty} P\left\{\left|\frac{1}{n} \sum_{k=1}^{n} X_{k}-\mu\right|&lt;\varepsilon\right\}=1
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.0820879999999997em;vertical-align:-1.302113em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-2.1em;margin-left:0em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mrel mtight">→</span><span class="mord mtight">∞</span></span></span></span><span style="top:-2.7em;"><span class="pstrut" style="height:2.7em;"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.7799749999999999em;"><span style="top:-1.355975em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-1.9619749999999998em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.5679749999999997em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-3.173975em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-3.779975em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.250025em;"><span></span></span></span></span></span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">n</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.8478869999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.300005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.302113em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">μ</span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.7799749999999999em;"><span style="top:-1.355975em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-1.9619749999999998em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.5679749999999997em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-3.173975em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-3.779975em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.250025em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">ε</span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size4">}</span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></span></p>
<pre><code>人话版：当样本趋近于无穷，样本均值与参数均值相等
</code></pre>
<p><strong>伯努利定律是辛钦定理的特殊情况</strong></p>
<h1 id="中心极限定理">中心极限定理</h1>
<pre><code>人话版小故事，你是浙江皮革厂的厂长，你要卖皮鞋，一开始你卖皮鞋，你想知道中国大部分人穿几码的鞋，你要开始市场调查，你去查吧，中国13亿人口，总不可能全查一遍吧，所以我们选取抽样调查。但是问题又出现了，你只调查一个样本群体的鞋子尺码大小无法代表所有人，所以，我们必须抽很多的小群体样本，计算每个小群体的平均，就可以得到了中国人大部分穿几码的鞋子了鸭，因为样本越多，就越能代表中国人大部分人的尺码，（测量的平均值呈现正态分布）
</code></pre>
<h2 id="正态分布">正态分布</h2>
<pre><code>正态分布：（钟型曲线分布）只依赖数据集中两个参数的分布，这两个参数分别是：样本的平均值和标准差。
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://WalkingPineapple.github.io/post-images/1589376954480.png" alt="" loading="lazy"></figure>
<h2 id="中心极限定理-2">中心极限定理</h2>
<pre><code>样本的平均值约等于总体的平均值
在适当的条件下，大量相互独立随机变量的均值经适当标准化后依分布收敛于正态分布。
</code></pre>
<h2 id="拉普拉斯定理">拉普拉斯定理</h2>
<p>若X~B（n，p）是n次伯努利实验事件A的次数，每超出试验成功的概率为p，且q=1-p，则对任意有限区间[a，b]：<br>
令：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mi>k</mi></msub><mo>≡</mo><mfrac><mrow><mi>k</mi><mo>−</mo><mi>n</mi><mi>p</mi></mrow><msqrt><mrow><mi>n</mi><mi>p</mi><mi>q</mi></mrow></msqrt></mfrac></mrow><annotation encoding="application/x-tex">x_{k} \equiv \frac{k-n p}{\sqrt{n p q}}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61375em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.39438em;vertical-align:-1.02294em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714399999999998em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.70306em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathdefault">n</span><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span></span></span><span style="top:-2.66306em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.33693999999999996em;"><span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">n</span><span class="mord mathdefault">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.02294em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<p>当$$n \rightarrow \infty$$<br>
则</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext> (i) </mtext><mi>P</mi><mo>(</mo><mi>X</mi><mo>=</mo><mi>k</mi><mo>)</mo><mo>→</mo><mfrac><mn>1</mn><msqrt><mrow><mi>n</mi><mi>p</mi><mi>q</mi></mrow></msqrt></mfrac><mo>⋅</mo><mfrac><mn>1</mn><msqrt><mrow><mn>2</mn><mi>π</mi></mrow></msqrt></mfrac><msup><mi>e</mi><mrow><mo>−</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><msubsup><mi>x</mi><msub><mi>μ</mi><mi>n</mi></msub><mn>2</mn></msubsup></mrow></msup></mrow><annotation encoding="application/x-tex">\text { (i) } P(X=k) \rightarrow \frac{1}{\sqrt{n p q}} \cdot \frac{1}{\sqrt{2 \pi}} e^{-\frac{1}{2} x_{\mu_{n}}^{2}}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord"> (i) </span></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.34438em;vertical-align:-1.02294em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.70306em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathdefault">n</span><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span></span></span><span style="top:-2.66306em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.33693999999999996em;"><span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.02294em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.25144em;vertical-align:-0.93em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.2027799999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.90722em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord">2</span><span class="mord mathdefault" style="margin-right:0.03588em;">π</span></span></span><span style="top:-2.86722em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.13278em;"><span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.93em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.0369199999999998em;"><span style="top:-3.413em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8443142857142858em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8913142857142857em;"><span style="top:-2.214em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.23056em;"><span style="top:-2.3em;margin-left:0em;margin-right:0.1em;"><span class="pstrut" style="height:2.5em;"></span><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4288571428571428em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext> (ii) </mtext><mi>P</mi><mrow><mo fence="true">(</mo><mi>a</mi><mo>≤</mo><mfrac><mrow><mi>X</mi><mo>−</mo><mi>n</mi><mi>p</mi></mrow><msqrt><mrow><mi>n</mi><mi>p</mi><mi>q</mi></mrow></msqrt></mfrac><mo>≤</mo><mi>b</mi><mo fence="true">)</mo></mrow><mo>→</mo><msubsup><mo>∫</mo><mi>a</mi><mi>b</mi></msubsup><mi>φ</mi><mo>(</mo><mi>x</mi><mo>)</mo><mi>d</mi><mi>x</mi><mtext> , 其中 </mtext><mi>φ</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>=</mo><mfrac><mn>1</mn><msqrt><mrow><mn>2</mn><mi>π</mi></mrow></msqrt></mfrac><msup><mi>e</mi><mrow><mo>−</mo><mfrac><msup><mi>x</mi><mn>2</mn></msup><mn>2</mn></mfrac></mrow></msup><mo>(</mo><mo>−</mo><mi mathvariant="normal">∞</mi><mo>&lt;</mo><mi>x</mi><mo>&lt;</mo><mi mathvariant="normal">∞</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">\text { (ii) } P\left(a \leq \frac{X-n p}{\sqrt{n p q}} \leq b\right) \rightarrow \int_{a}^{b} \varphi(x) d x \text { , 其中 } \varphi(x)=\frac{1}{\sqrt{2 \pi}} e^{-\frac{x^{2}}{2}}(-\infty&lt;x&lt;\infty)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.47294em;vertical-align:-1.02294em;"></span><span class="mord text"><span class="mord"> (ii) </span></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603299999999998em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.70306em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathdefault">n</span><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span></span></span><span style="top:-2.66306em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.33693999999999996em;"><span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">n</span><span class="mord mathdefault">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.02294em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">b</span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.5109580000000005em;vertical-align:-0.9119499999999999em;"></span><span class="mop"><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.0011249999999999316em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5990080000000004em;"><span style="top:-1.7880500000000001em;margin-left:-0.44445em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span style="top:-3.812900000000001em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">b</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9119499999999999em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">φ</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mord mathdefault">d</span><span class="mord mathdefault">x</span><span class="mord text"><span class="mord"> , </span><span class="mord cjk_fallback">其中</span><span class="mord"> </span></span><span class="mord mathdefault">φ</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.25144em;vertical-align:-0.93em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.2027799999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.90722em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord">2</span><span class="mord mathdefault" style="margin-right:0.03588em;">π</span></span></span><span style="top:-2.86722em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.13278em;"><span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.93em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.20602em;"><span style="top:-3.4130000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1328857142857145em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.04844em;"><span style="top:-3.04844em;margin-right:0.1em;"><span class="pstrut" style="height:2.64444em;"></span><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord">−</span><span class="mord">∞</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∞</span><span class="mclose">)</span></span></span></span></span></p>
<figure data-type="image" tabindex="3"><img src="https://WalkingPineapple.github.io/post-images/1589376961936.png" alt="" loading="lazy"></figure>
<h1 id="大数定理和中心极限定理的区别">大数定理和中心极限定理的区别</h1>
<p>1.大数定理是样本均值收敛到总体均值<br>
2.中心极限定理则是样本量足够大，样本均值分布慢慢变成正态分布</p>
<h3 id="参考文献">参考文献</h3>
<p>[1]维基百科<br>
[2]统计之美——人工智能时代的科学思维</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[图像傅里叶变换]]></title>
        <id>https://WalkingPineapple.github.io/post/tu-xiang-fu-li-xie-bian-huan/</id>
        <link href="https://WalkingPineapple.github.io/post/tu-xiang-fu-li-xie-bian-huan/">
        </link>
        <updated>2020-02-13T13:24:12.000Z</updated>
        <content type="html"><![CDATA[<p><strong>傅里叶变换数学推导以后有时间补博客后</strong></p>
<h1 id="傅里叶变换">傅里叶变换</h1>
<p>图像处理除了对空间域处理，还可以在频率域进行处理。而将图像的空间域变换到频率域的较为广泛方法就是傅里叶变换。<br>
<strong>傅里叶变换数学推导以后有时间补博客后</strong>，而我们只需要知道：”<strong>任何周期函数都可以表示为不同频率的正弦函数和的形式</strong>“<br>
可以参考wiki上的一张gif如下，或者直接移步知乎大佬的掐死教程哈。</p>
<p><img src="https://WalkingPineapple.github.io/post-images/1581600311071.gif" alt="" loading="lazy"><br>
​<br>
通过傅里叶变化，我们可以得到图像的高频和低频：</p>
<ul>
<li>高频：图像灰度变化比较剧烈，频率越大，变化就越剧烈。比如 轮廓</li>
<li>低频：图像灰度变化比较慢，频率越小，变化就缓慢<br>
在OpenCV中，提供了傅里叶变换和傅里叶逆变换的两个函数，先来说傅里叶变换:</li>
</ul>
<h2 id="opencv傅里叶变换">OpenCV傅里叶变换</h2>
<p>cv2.dft(img,flags)</p>
<ul>
<li>img：原始图像，必须为np.float3格式</li>
<li>flags：转换标志，通常为cv2.DFT_COMPLEX_OUTPUT<br>
在通过傅里叶变换后，频率为0的分量处于左上角，为了处理方便，我们通常使用numpy.fft.fftshift()移到中心位置，最后，还需要通过cv2.magnitude()，计算出我们目标图像的幅度值，逆变换与之类似。<br>
<strong>实际代码演示</strong></li>
</ul>
<pre><code class="language-python">img=cv2.imread('hh.jpg',cv2.IMREAD_GRAYSCALE)
img_float32=np.float32(img)
#傅里叶变换
dft=cv2.dft(img_float32,flags=cv2.DFT_COMPLEX_OUTPUT)
print(dft)
dft_fit=np.fft.fftshift(dft);
print(dft_fit)
magnitude_spectrum = 20*np.log(cv2.magnitude(dft_fit[:,:,0],dft_fit[:,:,1]))
print(magnitude_spectrum)
plt.subplot(121),plt.imshow(img, cmap = 'gray')
plt.title('Input Image'), plt.xticks([]), plt.yticks([])
plt.subplot(122),plt.imshow(magnitude_spectrum, cmap = 'gray')
plt.title('Magnitude Spectrum'), plt.xticks([]), plt.yticks([])
plt.show()
</code></pre>
<p>​<img src="https://WalkingPineapple.github.io/post-images/1581600298591.png" alt="" loading="lazy"></p>
<h2 id="低通滤波器和高通滤波器">低通滤波器和高通滤波器</h2>
<p>低通滤波器和高通滤波器类似，低通滤波器就是保留低频信号，而高通则是保留高频信号，前者可以让图片变得模糊，后者则是让图像的细节（轮廓）更为增强，我们可以通过设置一个掩膜，让非保留的值都置位0即可<br>
<strong>实际代码演示</strong></p>
<pre><code class="language-python">#设置掩膜
#找到中心位置
rows,cols=img.shape
crow,ccol=int(rows/2),int(cols/2)
mask=np.zeros((rows,cols,2),np.uint8)
#高通
# mask=np.ones((rows,cols,2),np.uint8)
mask[crow-30:crow+30,ccol-30:ccol+30]=1
​
fshift = dft_fit*mask
f_ishift = np.fft.ifftshift(fshift)
img_back = cv2.idft(f_ishift)
img_back = cv2.magnitude(img_back[:,:,0],img_back[:,:,1])
</code></pre>
<p><img src="https://WalkingPineapple.github.io/post-images/1581600290575.png" alt="" loading="lazy"><br>
字符：22 / 1,614</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[图像直方图]]></title>
        <id>https://WalkingPineapple.github.io/post/tu-xiang-zhi-fang-tu/</id>
        <link href="https://WalkingPineapple.github.io/post/tu-xiang-zhi-fang-tu/">
        </link>
        <updated>2020-02-12T12:35:44.000Z</updated>
        <content type="html"><![CDATA[<h1 id="图像直方图">图像直方图</h1>
<h2 id="图像直方图-2">图像直方图</h2>
<p>通过直方图，可以统计出图像中各个像素的灰度级出现的次数。通常情况下，我们的图像有256个灰度级[0,255]。</p>
<h4 id="histcv2calchistimageschannelsmaskhistsizerangesaccumulate">hist=cv2.calcHist(images,channels,mask,histSize,ranges,accumulate)</h4>
<p>-hist：返回一个一维数组，数组内元素是各个灰度级的个数</p>
<ul>
<li>images: 原图像图像格式为 uint8 或 ﬂoat32。当传入函数时应 用中括号 [] 括来例如[img]</li>
<li>channels: 同样用中括号括来它会告函数我们统幅图 像的直方图。如果入图像是灰度图它的值就是 [0]如果是彩色图像 的传入的参数可以是 [0][1][2] 它们分别对应着 BGR。</li>
<li>mask: 掩模图像。统整幅图像的直方图就把它为 None。但是如 果你想统图像某一分的直方图的你就制作一个掩模图像并 使用它。
<ul>
<li>构造掩膜，通常先构造一个像素值都为0的二维数组，在将数组中的指定区域设为255，我们就可以得到掩膜图像</li>
</ul>
</li>
<li>histSize:BINS的数目。也应用中[]括来</li>
<li>ranges: 像素值范围常为 [0,255]</li>
<li>accumulate:累积标识，默认值为False，为True： 直方图开始计算不清零，计算的是多个直方图的累积结果，常用于一组图像计算直方图。<br>
<strong>实际代码演示</strong></li>
</ul>
<pre><code class="language-python">img=cv2.imread('timg.jpg',cv2.IMREAD_GRAYSCALE)
img_show('img',img)

#直方图处理

hist1=cv2.calcHist([img],[0],None,[256],[0,255])
print(hist1.shape)
plt.plot(hist1, color='b')
plt.show()

# 掩膜操作

#构造掩膜
mask = np.zeros(img.shape[:2], np.uint8)
print(mask)
mask[150:200,150:400]=255
img_show(&quot;mask&quot;,mask)

masked_img = cv2.bitwise_and(img, img, mask=mask)#与操作
img_show('mask_img',masked_img)

#掩膜操作
hist2=cv2.calcHist([img],[0],mask,[256],[0,255])
print(hist2.shape)
plt.plot(hist2, color='b')
plt.show()

</code></pre>
<p><strong>效果图</strong></p>
<figure data-type="image" tabindex="1"><img src="https://WalkingPineapple.github.io/post-images/1581511050130.png" alt="" loading="lazy"></figure>
<h2 id="直方图均衡化">直方图均衡化</h2>
<p>通过直方图均衡化，可以让原始图像灰度级变得均匀，色彩也就会趋于平衡，具体操作如下</p>
<ul>
<li>计算累计直方图</li>
<li>对累积直方图进行区间转换<br>
####dst=cv2.quealizeHist(src)</li>
<li>src:单通道的原始图像</li>
<li>dst：直方图均衡化处理的结果<br>
<strong>实际代码演示</strong></li>
</ul>
<pre><code class="language-python">#直方图均衡化
equ = cv2.equalizeHist(img)
plt.hist(equ.ravel(),256)
plt.show()
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://WalkingPineapple.github.io/post-images/1581511121179.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[图像轮廓（二）]]></title>
        <id>https://WalkingPineapple.github.io/post/tu-xiang-lun-kuo-er/</id>
        <link href="https://WalkingPineapple.github.io/post/tu-xiang-lun-kuo-er/">
        </link>
        <updated>2020-02-12T07:23:54.000Z</updated>
        <content type="html"><![CDATA[<h2 id="图像轮廓">图像轮廓</h2>
<h3 id="图像拟合">图像拟合</h3>
<p>用一个多边形去拟合我们需要的轮廓。</p>
<h4 id="边界矩形">边界矩形</h4>
<p>retval=cv2.boundingRect(array)</p>
<ul>
<li>
<p>retval:返回值，矩形左上角的顶点坐标值和矩形边界的宽度和高度，分别是:</p>
<ul>
<li>矩形左上角的X坐标</li>
<li>矩形左上角的y坐标</li>
<li>矩形边界的x方向的长度</li>
<li>矩形边界的y方向的长度</li>
</ul>
</li>
<li>
<p>array：灰度图像或者轮廓</p>
<figure data-type="image" tabindex="1"><img src="https://WalkingPineapple.github.io/post-images/1581492330618.png" alt="" loading="lazy"></figure>
</li>
</ul>
<h4 id="边界圆形">边界圆形</h4>
<p>center，radius=cv2.minEnclosingCircle(points)</p>
<ul>
<li>center:包围圆形的圆心</li>
<li>radius：包围圆形的半径</li>
<li>points:轮廓<br>
<strong>实际代码展示</strong></li>
</ul>
<pre><code class="language-python">import  cv2
import  numpy as np
import matplotlib.pyplot as plt

def img_show(name,img):
    cv2.imshow('name',img)
    cv2.waitKey(0)
    cv2.destroyAllWindows()

img=cv2.imread('rectangle.png')
gray=cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
ret,thresh=cv2.threshold(gray,127,255,cv2.THRESH_BINARY)
img_show(&quot;con&quot;,thresh)
binary,contours,hierarchy=cv2.findContours(thresh,cv2.RETR_TREE, cv2.CHAIN_APPROX_NONE)


for i in range (len(contours)):
    x, y, w, h = cv2.boundingRect(contours[i])
    (x1,y1),r=cv2.minEnclosingCircle(contours[i])
    center=(int(x1),int(y1))
    radius=int(r)
    #矩形包边框
    result = cv2.rectangle(img,(x,y),(x+w,y+h),(0,255,0),5)
    #最小包围圆形
    result1=cv2.circle(img,center,radius,(0,255,0),5)

img_show('result',result)
img_show('result1',result1)
</code></pre>
<p>效果图：<br>
<img src="https://WalkingPineapple.github.io/post-images/1581492353756.png" alt="" loading="lazy"><br>
#最优拟合椭圆<br>
retval=cv2.fitEllipse(points)</p>
<ul>
<li>retval：返回一个外界矩形，这个外接矩形的质心、宽、高、旋转角度等参数和椭圆中的中心点、轴长度、旋转角度想吻合</li>
<li>points：轮廓<br>
#最优拟合直线<br>
line=cv2.fitLine.（points, distType, param, reps, aeps）</li>
<li>line：返回值，直线参数</li>
<li>points：轮廓</li>
<li>distType：距离类型，最优即是距离最短</li>
<li>param：距离参数，与所选距离类型有关，设置为0会自动选择最优值</li>
<li>reps:拟合直线的径向精度，通常情况下：0.01</li>
<li>aeps：拟合直线的角度精度，通常情况下：0.01<br>
#最小外包三角形<br>
retval, triangle =CV2. minEnclosingTriangle(points)</li>
<li>retval:三角形面积</li>
<li>triangle：三角形的顶点集</li>
</ul>
<p><strong>实际代码演示</strong></p>
<pre><code class="language-python">img=cv2.imread('ellipse.png')
gray=cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
ret,thresh=cv2.threshold(gray,127,255,cv2.THRESH_BINARY)
img_show(&quot;con&quot;,thresh)
binary,contours,hierarchy=cv2.findContours(thresh,cv2.RETR_TREE, cv2.CHAIN_APPROX_NONE)
rows,cols=img.shape[:2]

for i in range (len(contours)):
    # x, y, w, h = cv2.boundingRect(contours[i])
    # (x1,y1),r=cv2.minEnclosingCircle(contours[i])
    # center=(int(x1),int(y1))
    # radius=int(r)
    # #矩形包边框
    # result = cv2.rectangle(img,(x,y),(x+w,y+h),(0,255,0),5)
    # result1=cv2.circle(img,center,radius,(0,255,0),5)

    #椭圆
    ellipse=cv2.fitEllipse(contours[i])
    result=cv2.ellipse(img,ellipse,(0,255,0),5)
    #直线（欧氏距离)
    x,y,x1,y1=cv2.fitLine(contours[i],cv2.DIST_L2,0,0.01,0.01)
    lefty=int((-x1*y/x+y1))
    righty=int(((cols-x1)*y/x)+y1)
    result1=cv2.line(img,(cols-1,righty),(0,lefty),(0,0,255),5)
    #三角形
    area,triangle=cv2.minEnclosingTriangle(contours[i])
    for j in range(0,3):
        result2=cv2.line(img,tuple(triangle[j][0]),tuple(triangle[(j+1)%3][0]),(18,239,252),5)



img_show('result',result)
img_show('result1',result1)
img_show('result2', result2)
</code></pre>
<p>效果图如下：<br>
<img src="https://WalkingPineapple.github.io/post-images/1581492369613.png" alt="" loading="lazy"></p>
<h4 id="轮廓近似">轮廓近似</h4>
<p>拟合一个逼近多边形轮廓<br>
approxCurve= cv2. approxPolyDP（curve, epsilon, closed）</p>
<ul>
<li>apprpxCurve：返回值 逼近多边形的点集</li>
<li>curve：轮廓</li>
<li>epsilon：精度，原始轮廓的边界点与逼近多边形边界之间的最大距离</li>
<li>closed：True：封闭，反之，不封闭<br>
<strong>实际代码演示</strong></li>
</ul>
<pre><code class="language-python">epsilon = 0.02*cv2.arcLength(contours[0],True)
approx = cv2.approxPolyDP(contours[0],epsilon,True)
draw_img = img.copy()
res = cv2.drawContours(draw_img, [approx], -1, (0, 255, 0), 2)
img_show('res',res)
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://WalkingPineapple.github.io/post-images/1581492393772.png" alt="" loading="lazy"></figure>
<h4 id="凸包">凸包</h4>
<p>通过轮廓上的点去构成一个多边形，并且这个多边形会包含原有的轮廓。</p>
<p>hull=cv2.convexHull(points,clockwise,returnPoints)</p>
<ul>
<li>hull:凸角点</li>
<li>clockwise:控制凸角点是顺时针（True）方向还是逆时针（False）方向排列。</li>
<li>returnPoints：如果为True，则返回凸角点的坐标值，如果为False，则返回凸角点的索引<br>
在凸包中， 凸包与轮廓之间的部分，我们就称为凸缺陷。<br>
convexityDefects=cv2.convexityDefects(contour,convexhull)</li>
<li>contour：轮廓</li>
<li>convexhull：凸包，在获取凸包的过程中，必须返回凸角点的索引<br>
<strong>实际代码演示</strong></li>
</ul>
<pre><code class="language-python">#凸包
#返回坐标值
hull_xy=cv2.convexHull(contours[0],clockwise=True,returnPoints=True)
print(&quot;凸角点的坐标值为&quot;,hull_xy)
hull_index=cv2.convexHull(contours[0],clockwise=True,returnPoints=False)
print(&quot;凸角点的索引&quot;,hull_index)
#绘制凸包
result=cv2.polylines(img,[hull_xy],True,(0,255,0),5)
img_show('convexity',result)
</code></pre>
<p>效果图：</p>
<figure data-type="image" tabindex="3"><img src="https://WalkingPineapple.github.io/post-images/1581492403515.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="4"><img src="https://WalkingPineapple.github.io/post-images/1581492411778.png" alt="" loading="lazy"></figure>
<p>从图中不难看出，凸包的凸角点都是凸的，凸包内，任意三个点的内角都小与180°。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[图像轮廓（一）]]></title>
        <id>https://WalkingPineapple.github.io/post/tu-xiang-lun-kuo-yi/</id>
        <link href="https://WalkingPineapple.github.io/post/tu-xiang-lun-kuo-yi/">
        </link>
        <updated>2020-02-11T12:12:03.000Z</updated>
        <content type="html"><![CDATA[<h2 id="图像轮廓">图像轮廓</h2>
<p>边缘与轮廓简单区别：边缘有无连续，轮廓一定连续。</p>
<h3 id="查找轮廓">查找轮廓</h3>
<p>在OpenCV中，函数cv2.findContours()可以帮助我们查找出图像的轮廓<br>
img，contours，hierarchy=cv2=.findContours(img,mode,method)</p>
<ul>
<li>img:返回值，与原始图像一致</li>
<li>contours:返回的轮廓，每个轮廓都是由若干点构成，contours[i][j]:第i个轮廓的第j个点，contours返回值是list类型，其中每个轮廓都是ndarray结构</li>
<li>hierarchy：轮廓层次，轮廓之间存在一种包含形式，外部的轮廓即是父轮廓，内部则是子轮廓。每个轮廓对应四个元素来说明当前轮廓的关系，Next（后一个轮廓的索引编号）、Previous（前一个轮廓的索引编号）、FirstChild（第一子轮廓的索引编号）、Parent（父轮廓的索引编号）。如果对应关系为空，则hierarchy值为-1</li>
<li>img：原始图像，非零值处理为1,（变为二值图像）</li>
<li>mode：轮廓检索模式
<ul>
<li>RETR_EXTERNAL ：只检索最外面的轮廓；</li>
<li>RETR_LIST：检索所有的轮廓，并将其保存到一条链表当中；</li>
<li>RETR_CCOMP：检索所有的轮廓，并将他们组织为两层：顶层是各部分的外部边界，第二层是空洞的边界;</li>
<li>RETR_TREE：检索所有的轮廓，并重构嵌套轮廓的整个层次;</li>
</ul>
</li>
<li>metrhod：轮廓逼近方法
<ul>
<li>CHAIN_APPROX_NONE：以Freeman链码的方式输出轮廓，所有其他方法输出多边形（顶点的序列）。</li>
<li>CHAIN_APPROX_SIMPLE:压缩水平的、垂直的和斜的部分，也就是，函数只保留他们的终点部分。(保存了4个点）</li>
<li>CHAIN_APPROX_TC89_L1:使用teh-China chain 近似算法的一种风格</li>
<li>CHAIN_APPROX_TC89_KCOS:使用teh-China chain 近似算法的一种风格<br>
针对查找的轮廓，可以对轮廓进行计算周长和面积，具体看代码演示。</li>
</ul>
</li>
</ul>
<h3 id="绘制轮廓">绘制轮廓</h3>
<p>在我们将轮廓查找到之后，我们要将轮廓在原始图像中画出来，使用cv2.drawContours()绘制轮廓<br>
image=cv2.drawContours(img,contours,contourIdx,color,thickness,lineType,hierarchy,maxLevel,offset)</p>
<ul>
<li>image:返回值，绘制完的图像</li>
<li>img：原始图像，待绘制，绘制是直接在原图操作，会直接在原图操作，不可逆</li>
<li>contours：通过cv2.findContours()查找出来的轮廓</li>
<li>conttourIdx：绘制轮廓的索引默认为-1，则绘制全部轮廓</li>
<li>color：轮廓的颜色，BGR</li>
<li>thickness：可选参数，的粗细，默认-1，绘制实心轮廓</li>
<li>lineType：可选参数，线条的样式</li>
<li>hierarchy：对应cv2.findContours()所输出的层次信息</li>
<li>maxLevel：控制轮廓深度，如果为0，则表示绘制第0层的轮廓，如果为非零正数，表示绘制最高层一下相同数量级的轮廓。</li>
<li>offset：偏移量，让轮廓在不同置展示出来<br>
<strong>实际代码演示</strong></li>
</ul>
<pre><code class="language-python">import  cv2
import  numpy as np
import matplotlib.pyplot as plt

def img_show(name,img):
    cv2.imshow('name',img)
    cv2.waitKey(0)
    cv2.destroyAllWindows()

# img=cv2.imread(&quot;timg.jpg&quot;)
img=cv2.imread(&quot;orgin.png&quot;)
gray=cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)

ret,thresh=cv2.threshold(gray,127,255,cv2.THRESH_BINARY)
img_show(&quot;con&quot;,thresh)
print(thresh.shape)

# binary,contours,hierarchy=cv2.findContours(thresh,cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)
# binary,contours,hierarchy=cv2.findContours(thresh,cv2.RETR_LIST, cv2.CHAIN_APPROX_NONE)
# binary,contours,hierarchy=cv2.findContours(thresh,cv2.RETR_CCOMP, cv2.CHAIN_APPROX_NONE)
binary,contours,hierarchy=cv2.findContours(thresh,cv2.RETR_TREE, cv2.CHAIN_APPROX_NONE)
#查看图中有几个轮廓
print(len(contours))
print(hierarchy)
#绘制轮廓
draw_img=img.copy();
 result=cv2.drawContours(draw_img,contours,-1,(0,255,0),5)
img_show('result',result)
</code></pre>
<p>原图如下：</p>
<p><img src="https://WalkingPineapple.github.io/post-images/1581423167858.png" alt="" loading="lazy"><br>
效果图如下：</p>
<figure data-type="image" tabindex="1"><img src="https://WalkingPineapple.github.io/post-images/1581423206221.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="2"><img src="https://WalkingPineapple.github.io/post-images/1581423304894.png" alt="" loading="lazy"></figure>
<h3 id="图像矩">图像矩</h3>
<p>对图像像素点的灰度值进行的一种特殊加权方式。它代表了图像的特征。在OpenCV中，提供了moments()函数来获取图像的moments特征（轮廓矩）<br>
retval=cv2.moments(array,binaryImage)</p>
<ul>
<li>retval：返回值，也就是矩特征，主要包括
<ul>
<li>零阶矩：m00 (轮廓的面积)</li>
<li>一阶矩：m10,m01</li>
<li>二阶矩:   m20,m11,m02</li>
<li>三阶矩：m30,m21,m12,m03</li>
<li>二阶中心矩：mu20,mu11,mu02</li>
<li>三阶中心矩：mu30,mu21,mu12,mu03</li>
<li>二阶Hu矩：nu20,nu11,nu02</li>
<li>三阶Hu矩：nu30,nu21,nu12,nu03</li>
</ul>
</li>
<li>array：点集或者二值图像，如果是点集，函数会这个点集当作轮廓的顶点，把整个点记为一个轮廓</li>
<li>binaryImage:如果为True，array内所有的非零值都会处理为1<br>
通过轮廓矩，我们可以判断两个轮廓是否相似。<br>
<strong>实际代码演示</strong></li>
</ul>
<pre><code class="language-python">print(&quot;第&quot; + str(i) + &quot;轮廓的面积&quot;, cv2.moments(contours[i]))
</code></pre>
<figure data-type="image" tabindex="3"><img src="https://WalkingPineapple.github.io/post-images/1581423327873.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[图像金字塔]]></title>
        <id>https://WalkingPineapple.github.io/post/tu-xiang-jin-zi-ta/</id>
        <link href="https://WalkingPineapple.github.io/post/tu-xiang-jin-zi-ta/">
        </link>
        <updated>2020-02-10T13:58:04.000Z</updated>
        <content type="html"><![CDATA[<h2 id="图像金字塔">图像金字塔</h2>
<p>高分辨率图像产生的低分辨率图像集合。</p>
<figure data-type="image" tabindex="1"><img src="https://WalkingPineapple.github.io/post-images/1581343121950.png" alt="" loading="lazy"></figure>
<h3 id="高斯金字塔">高斯金字塔</h3>
<pre><code>将原图像不断使用高斯滤波器进行滤波，将滤波图像删除偶数行和偶数列删除（向下采样），通过向下采样，原图像像素值丢失，分辨率减小。
dst=cv2.pyrdown(src,dstsize,borderType)
- src:原图像
- dstsize：目标图像，可选参数，默认情况下，输出图像的大小为Size((src.cols+1)/2, (src.rows+1)/2)
- borderType：边框
</code></pre>
<p><strong>实际代码演示</strong></p>
<pre><code class="language-python">down=cv2.pyrDown(img)
img_show('down',down)
print(down.shape)
</code></pre>
<pre><code>同时， 向上采样则是通过新值为零的行和列，在用先前的卷积核*4和放大的图像卷积，保证我们得到的像素值都在[0,255]以内
</code></pre>
<p>dst=cv2.pyrup(src,dstsize,borderType)<br>
- src:原图像<br>
- dstsize：目标图像，可选参数，默认情况下，输出图像的大小为Size(src.col<em>2, src.rows</em>2)<br>
- borderType：边框<br>
<strong>实际代码演示</strong></p>
<pre><code class="language-python">#向上采样
up=cv2.pyrUp(img)
img_show('up',up)
print(up.shape)
</code></pre>
<p><img src="https://WalkingPineapple.github.io/post-images/1581343142999.png" alt="" loading="lazy"><br>
PS:向下采样和向上采样的操作都是不可逆的。</p>
<h3 id="拉普拉斯金字塔">拉普拉斯金字塔</h3>
<p>通过拉普拉斯金字塔，我们可以向上采样的时能够恢复较高的原始图像。具体操作如下：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi mathvariant="normal">L</mi><mi mathvariant="normal">i</mi></msub><mo>=</mo><msub><mi mathvariant="normal">G</mi><mi mathvariant="normal">i</mi></msub><mo>−</mo><mrow><mi mathvariant="normal">P</mi><mi mathvariant="normal">y</mi><mi mathvariant="normal">r</mi><mi mathvariant="normal">U</mi><mi mathvariant="normal">p</mi></mrow><mrow><mo fence="true">(</mo><mrow><mi mathvariant="normal">P</mi><mi mathvariant="normal">y</mi><mi mathvariant="normal">r</mi><mi mathvariant="normal">D</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">w</mi><mi mathvariant="normal">n</mi></mrow><mrow><mo fence="true">(</mo><msub><mi mathvariant="normal">G</mi><mi mathvariant="normal">i</mi></msub><mo fence="true">)</mo></mrow><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">\mathrm{L}_{\mathrm{i}}=\mathrm{G}_{\mathrm{i}}-\mathrm{PyrUp}\left(\mathrm{PyrDown}\left(\mathrm{G}_{\mathrm{i}}\right)\right)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">L</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31750199999999995em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathrm mtight">i</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">G</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31750199999999995em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathrm mtight">i</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathrm">P</span><span class="mord mathrm" style="margin-right:0.01389em;">y</span><span class="mord mathrm">r</span><span class="mord mathrm">U</span><span class="mord mathrm">p</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathrm">P</span><span class="mord mathrm" style="margin-right:0.01389em;">y</span><span class="mord mathrm">r</span><span class="mord mathrm">D</span><span class="mord mathrm">o</span><span class="mord mathrm" style="margin-right:0.01389em;">w</span><span class="mord mathrm">n</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord"><span class="mord mathrm">G</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31750199999999995em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathrm mtight">i</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span></span></p>
<ul>
<li>Li：拉普拉斯金字塔第i层</li>
<li>Gi：高斯金字塔的第i层<br>
<img src="https://WalkingPineapple.github.io/post-images/1581343155632.png" alt="" loading="lazy"><br>
<strong>实际代码演示</strong></li>
</ul>
<pre><code class="language-python">#拉普拉斯金字塔
up_1=cv2.pyrUp(down)
result=img-up_1
img_show('result',result)
print(result.shape)
</code></pre>
]]></content>
    </entry>
</feed>